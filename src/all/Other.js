// ğŸ”¹ React'ten useState hook'unu import ediyoruz.
// useState, bileÅŸen iÃ§inde veriyi (durumu) saklamamÄ±zÄ± ve deÄŸiÅŸtirmemizi saÄŸlar.
import { useState } from "react";

// ğŸ”¹ Functional component (fonksiyonel bileÅŸen) tanÄ±mlÄ±yoruz.
export const Other = () => {

  // ğŸ”¹ YaÅŸ bilgisini tutmak iÃ§in state tanÄ±mlÄ±yoruz.
  // age: mevcut yaÅŸ deÄŸeri
  // setAge: yaÅŸÄ± deÄŸiÅŸtiren fonksiyon
  const [age, setAge] = useState(0);

  // ğŸ”¹ KullanÄ±cÄ±nÄ±n yetiÅŸkin olup olmadÄ±ÄŸÄ±nÄ± kontrol eden deÄŸiÅŸken.
  const isAdult = age >= 18;

  // ğŸ”¹ Butona tÄ±klanÄ±nca yaÅŸ deÄŸerini 1 artÄ±ran fonksiyon.
  const increaseAge = () => {
    setAge(age + 1);  // state'i 1 artÄ±rÄ±r
    console.log(age); // (Not: console.log anlÄ±k olarak eski deÄŸeri gÃ¶sterebilir Ã§Ã¼nkÃ¼ state async gÃ¼ncellenir)
  };

  // ğŸ”¹ Input deÄŸerini tutan bir state tanÄ±mlÄ±yoruz.
  const [inputValue, setInputValue] = useState("");

  // ğŸ”¹ Input alanÄ±ndaki deÄŸiÅŸikliÄŸi yakalayan event fonksiyonu.
  const handleInputChange = (event) => {
    setInputValue(event.target.value); // input'a yazÄ±lan deÄŸeri state'e kaydeder
  };

  // ğŸ”¹ Metnin gÃ¶rÃ¼nÃ¼r olup olmadÄ±ÄŸÄ±nÄ± kontrol eden state
  const [showText, setShowText] = useState(true);

  // ğŸ”¹ Metnin rengini kontrol eden state
  const [textColor, setTextColor] = useState("black");

  // ğŸ”¹ BileÅŸenin JSX (UI) kÄ±smÄ±:
  return (
    <div>
      {/* ğŸ”¹ 1. Buton: ekrana alert Ã§Ä±karÄ±r */}
      <button onClick={() => { alert("HEYYY!!!"); }}>Show/Hide Alert</button>

      {/* ğŸ”¹ 2. Buton: metni gizle/gÃ¶ster toggle eder */}
      <button onClick={() => { setShowText(!showText); }}>Show/Hide Text</button>

      {/* ğŸ”¹ 3. Buton: metin rengini siyah â†” mavi arasÄ±nda deÄŸiÅŸtirir */}
      <button onClick={() => { setTextColor(textColor === "black" ? "blue" : "black"); }}>
        Change Text Color
      </button>

      <br />

      {/* ğŸ”¹ showText true ise metni gÃ¶sterir */}
      {showText === true && <h1 style={{ color: textColor }}>Welcome to React App</h1>}

      <br />

      {/* ğŸ”¹ YaÅŸ gÃ¶stergesi + artÄ±rma butonu */}
      {age} <button onClick={increaseAge}>Increase Age</button>

      <br /><br />

      {/* ğŸ”¹ KullanÄ±cÄ±dan input alÄ±nÄ±r ve her deÄŸiÅŸiklikte handleInputChange Ã§alÄ±ÅŸÄ±r */}
      <input type="text" onChange={handleInputChange} />

      {/* ğŸ”¹ KullanÄ±cÄ±nÄ±n girdiÄŸi metin anlÄ±k olarak ekranda gÃ¶sterilir */}
      {inputValue}

      <br />

      {/* ğŸ”¹ YaÅŸ durumuna gÃ¶re koÅŸullu metin gÃ¶sterimi */}
      <p style={{ color: 'orange', fontWeight: 'bold' }}>
        {isAdult ? "Is adult" : "Is not adult"}
      </p>
    </div>
  )
};


// ğŸ§© Ã–ZET NOTLAR:
// âœ… useState â†’ React'te component iÃ§inde dinamik veri tutmayÄ± saÄŸlar.
// âœ… onClick, onChange â†’ kullanÄ±cÄ± etkileÅŸimleriyle state'i deÄŸiÅŸtiren event'lerdir.
// âœ… JSX iÃ§inde koÅŸullu gÃ¶sterim (conditional rendering) â†’ {koÅŸul && <element>} veya ternary ile yapÄ±lÄ±r.
// âœ… Bu Ã¶rnek, Reactâ€™te interaktif UI oluÅŸturmanÄ±n temelini gÃ¶steriyor:
//    ğŸ”¸ State yÃ¶netimi (yaÅŸ, metin, renk)
//    ğŸ”¸ Event handling (butonlar, inputlar)
//    ğŸ”¸ KoÅŸullu render ve dinamik stil kullanÄ±mÄ±
